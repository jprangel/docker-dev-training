This text is based on https://cloud.google.com/containers

# What Containers Do
## Highlights

- Containers provides isolation/abstraction layer for your software;
  - Abstration = Running indenpendely of host/hardware/system operational that they actually are running;
    - Ex: You can run the same container in your private/public cloud from the prod env, locally or vice-versa;
  - Isolation = Virtualizing the resources at the OS-level;
    - A best-pratice with container is just run one app/function (serverless) per container;
 - With Containers you're able to have a consistent env (version/languages/libraries);
    - Less time debugging;
 - With Containers you're able to implements a few items from the 12 factors methodology (https://12factor.net/); 
 
 ## Containers vs Virtual Machines
 
 VM Stack = Infra (Hard) >> Host SO (Win/Lin) >> Hypervisor (KVM/VirtualBox) >>  Guest SO (Win/Lin) >> Bin/Libs >> APP (1/2/N)
 Container Stack = Infra (Hard) >> Host SO (Win/Lin) >> Container Runtime (Docker/CRI-O) >> Bin/Libs >> APP (1/2/N)
 
 - Containers are lighter, faster to run, easy to control and share, consumes less memory/disk space;
 
 ### How to Containers by-pass Hypervisors and Guest SO
 
 - Cgroups (https://en.wikipedia.org/wiki/Cgroups) + namespaces
 - Is a Linux kernel feature that limits, accounts for, and isolates the resource usage (CPU, memory, disk I/O, network, etc.) of a collection of processes.
